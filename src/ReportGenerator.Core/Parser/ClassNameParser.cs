using System;
using System.Text.RegularExpressions;

namespace Palmmedia.ReportGenerator.Core.Parser
{
    /// <summary>
    /// Parses class names and extracts generic type information.
    /// </summary>
    internal static class ClassNameParser
    {
        /// <summary>
        /// Regex to analyze if a class name represents a generic class.
        /// </summary>
        private static readonly Regex GenericClassRegex = new Regex("<.*>$", RegexOptions.Compiled);

        /// <summary>
        /// Regex to analyze if a class name represents an async (generic) class.
        /// Format gets generated by 'dotnet test --collect "Code Coverage;Format=Cobertura"'.
        /// </summary>
        private static readonly Regex AsyncClassRegex = new Regex("^(?<ClassName>.+)\\.<.*>.*__(?:.+(?<GenericTypes><.+>))?", RegexOptions.Compiled);

        /// <summary>
        /// Parses the class name and extracts generic type information.
        /// </summary>
        /// <param name="rawName">The raw/full name.</param>
        /// <param name="rawMode">Indicates whether class names are interpreted (false) or not (true)</param>
        /// <returns>The parser result.</returns>
        public static ClassNameParserResult ParseClassName(string rawName, bool rawMode)
        {
            if (string.IsNullOrEmpty(rawName))
            {
                throw new ArgumentNullException(nameof(rawName));
            }

            if (rawMode)
            {
                return new ClassNameParserResult(rawName, rawName, rawName, true);
            }

            int nestedClassSeparatorIndex = rawName.IndexOf('/');

            if (nestedClassSeparatorIndex > -1)
            {
                string className = rawName.Substring(0, nestedClassSeparatorIndex);
                return new ClassNameParserResult(className, className, rawName, IncludeClass(className));
            }

            if (rawName.Contains("<"))
            {
                if (rawName.Contains("__")
                    || rawName.Contains(".<>"))
                {
                    return new ClassNameParserResult(string.Empty, string.Empty, rawName, false);
                }

                var match = AsyncClassRegex.Match(rawName);

                if (match.Success)
                {
                    return new ClassNameParserResult(
                        match.Groups["ClassName"].Value,
                        match.Groups["ClassName"].Value + match.Groups["GenericTypes"].Value,
                        rawName,
                        IncludeClass(match.Groups["ClassName"].Value));
                }
            }

            return new ClassNameParserResult(rawName, rawName, rawName, IncludeClass(rawName));
        }

        private static bool IncludeClass(string name)
        {
            if (name.Contains("$"))
            {
                return false;
            }
            else
            {
                return !name.Contains("<") || GenericClassRegex.IsMatch(name);
            }
        }
    }
}
